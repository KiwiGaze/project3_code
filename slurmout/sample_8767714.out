# conda environments:
#
base                     /private/home/kartikahuja/.conda/envs/balancinggroups
in-context-learning   *  /private/home/kartikahuja/.conda/envs/balancinggroups/envs/in-context-learning
in-context-learning      /private/home/kartikahuja/.conda/envs/in-context-learning
my_env                   /private/home/kartikahuja/.conda/envs/my_env

Quinfig
-------
config: confs/linear_regression_icl2.yaml
data:
  data_dim: 10
  noise: true
  num_examples: 10000000
  prompt_max_len_test: 50
  prompt_max_len_train: 50
model:
  activations:
  - ReLU
  architecture: MLP_small
  batch_norms:
  - true
  dropouts:
  - 0.0
  input_dim: 11
  layer_norms:
  - false
  lr: 0.001
  num_epochs: 500
  output_dim: 1
  psi_hidden_dim: 500
  psi_output_dim: 100
  rho_hidden_dim: 500
  rho_output_dim: 100
  xi_hidden_dim: 500
out_dir: /private/home/kartikahuja/icl/models/
wandb_entity: kartik-ahuja

MLPset(
  (psi): Sequential(
    (0): Linear(in_features=11, out_features=500, bias=True)
    (1): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Linear(in_features=500, out_features=500, bias=True)
    (4): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Linear(in_features=500, out_features=500, bias=True)
    (7): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Linear(in_features=500, out_features=100, bias=True)
  )
  (rho): Sequential(
    (0): Linear(in_features=100, out_features=500, bias=True)
    (1): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Linear(in_features=500, out_features=500, bias=True)
    (4): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU()
    (6): Linear(in_features=500, out_features=500, bias=True)
    (7): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU()
    (9): Linear(in_features=500, out_features=100, bias=True)
  )
  (xi): Sequential(
    (0): Linear(in_features=110, out_features=500, bias=True)
    (1): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Linear(in_features=500, out_features=1, bias=True)
  )
)
